#pragma once

//#include <limits.h>

#include <algorithm>
#include <iostream>
//#include <limits>
#include <string>
#include <string_view>

static inline char get_char(uint8_t val)
{
        if (val < 10)
                return char('0' + val);
        if (val < 36) // up to base 36
                return 'a' + (val - 10);
        // could go higher just need to find which chars to use
}

template <typename NUMB> std::string_view ntoa(NUMB val, std::string &dest, uint8_t base = 10);
template <> std::string_view ntoa(uint64_t val, std::string &dest, uint8_t base)
{
        char buff[25];
        char *p = buff;

        if (!val)
        {
                dest += '0';
                return std::string_view(dest.c_str() + dest.length() - 1, 1);
        }

        while (val)
        {
                uint8_t ones = val % base;
                val /= base;
//std::cout << "base: " << uint32_t(base) << ", val: " << val << ", ones: " << ones << ", char: " << get_char(ones) << std::endl;
                *p++ = get_char(ones);
        }
        size_t len = p - buff;

        // could maybe shave some time by 
        // dest.resize(dest.length() + len)
        // then altering the swap loop to write directly into the last <len> chars of dest

        dest.reserve(dest.length() + len);
        *p-- = 0;
        char *s = buff;
        // reverse it
        while (s < p)
                std::swap(*s++, *p--);
        dest += buff;
        return std::string_view(dest.c_str() + dest.length() - len, len);
}

template<> std::string_view ntoa(int64_t val, std::string &dest, uint8_t base)
{
        char buff[25];
        char *p = buff;

        while (val)
        {
                uint8_t ones = val % base;
                val /= base;
                *p++ = get_char(ones);
        }
        if (val < 0)
                *p++ = '-';

        size_t len = p - buff;
        dest.reserve(dest.length() + len);
        *p-- = 0;
        char *s = buff;
        // reverse it
        while (s < p)
                std::swap(*s++, *p--);
        dest += buff;
        return std::string_view(dest.c_str() + dest.length() - len, len);
}

// TODO: need a specialization for double


template<> std::string_view ntoa(int32_t val, std::string &dest, uint8_t base) { return ntoa(int64_t(val), dest, base); }

template<> std::string_view ntoa(uint8_t val, std::string &dest, uint8_t base) { return ntoa(uint64_t(val), dest, base); }
template<> std::string_view ntoa(uint16_t val, std::string &dest, uint8_t base) { return ntoa(uint64_t(val), dest, base); }
template<> std::string_view ntoa(uint32_t val, std::string &dest, uint8_t base) { return ntoa(uint64_t(val), dest, base); }

template <typename NUMB> std::string_view ntoas(NUMB val, std::string &dest, uint8_t base = 10);
template <> std::string_view ntoas(uint64_t val, std::string &dest, uint8_t base)
{
        size_t initial_length = dest.length();
        dest.reserve(initial_length + 25);

        if (!val)
        {
                dest.push_back('0');
                return std::string_view(dest.c_str() + dest.length() - 1, 1);
        }

        while (val)
        {
                uint8_t ones = val % base;
                val /= base;
                dest.push_back(get_char(ones));
        }
        std::reverse(dest.begin() + initial_length, dest.end());
        return std::string_view(dest.c_str() + initial_length, dest.length() - initial_length);
}

template<> std::string_view ntoas(uint8_t val, std::string &dest, uint8_t base) { return ntoas(uint64_t(val), dest, base); }
template<> std::string_view ntoas(uint16_t val, std::string &dest, uint8_t base) { return ntoas(uint64_t(val), dest, base); }
template<> std::string_view ntoas(uint32_t val, std::string &dest, uint8_t base) { return ntoas(uint64_t(val), dest, base); }
