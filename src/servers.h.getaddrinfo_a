#pragma once

#include <netdb.h>
#include <string.h>
#include <unistd.h>

#include <atomic>
#include <chrono>
#include <condition_variable>
#include <iostream>
#include <mutex>
#include <string>
#include <string_view>
#include <thread>
#include <unordered_map>
#include <vector>

using namespace std::chrono_literals;

// plan on 200K servers, probably less for a while but lets anticipate

class server
{
public:
        server(std::string_view name)
                :m_name(name)
        {}

        std::string_view name() const { return m_name; }
        gaicb* gai() { return &m_gai; }

        void set_index(size_t ind) { m_index = ind; }
        size_t index() const { return m_index; }
private:
        std::string m_name;
        std::string m_error;
        struct gaicb m_gai;
        size_t m_index = 0;
        bool resolved = false;
};

class servers
{
public:
        servers(const std::string_view &delimited_servers)
        {
                parse_delimited(delimited_servers, std::string_view(",\n", 2));
                start_resolution();
        }

        const server* get_server()
        {
/*
I'm thinking this class should be responsible for also resolving each server/host name
potentially with getaddrinfo_a, it has gai_suspend and some notifcation functionality
could:
1. read in persisted addrs
2. call getaddrinfo_a for unresolved addrs
3. persist the resolved addrs
4. return a pair<string_view, addrinfo> from get_server()
5. this method could gai_suspend() until a server + addrinfo is available
*/
                std::unique_lock alock(m_mutex);
                
                while (m_servers_resolved.empty() && m_servers_processed.size() != m_servers.size())
                {
                        // might want an m_run var for early termination
                        //std::cout << "waiting, thread: " << std::this_thread::get_id() << std::endl;
                        m_waiters++;
                        auto ret = m_cond.wait_for(alock, 10ms);
                        m_waiters--;
                        if (std::cv_status::timeout == ret)
                        {
                                std::cout << "cond wait timed out" << std::endl;
                        }
                        //std::cout << "woke up, thread: " << std::this_thread::get_id() << std::endl;
                }

                server* ret = nullptr;

                if (!m_servers_resolved.empty())
                {
                        ret = m_servers_resolved.back();
                        m_servers_resolved.pop_back();
                        m_servers_processed.push_back(ret);
                        //std::cout << "servers::get_server, moved " << ret->name() << " to the processed vector" << std::endl;
                }

                return ret;
        }

        void print_servers()
        {
                for (auto &[name, srv] : m_servers)
                {
                        std::cout << "parsed: " << name << std::endl;
                }

                for (auto &srv : m_servers_resolved)
                {
                        std::cout << "resolved: " << srv->name() << std::endl;
                }

                for (auto &srv : m_servers_processed)
                {
                        std::cout << "processed: " << srv->name() << std::endl;
                }

                std::cout << "parsed: " << m_servers.size()
                          << ", resolved: " << m_servers_resolved.size()
                          << ", processed: " << m_servers_processed.size() << std::endl;
        }

        bool resolve_addrs()
        {
//I think there is a bug in the gai logic, the memory in m_dns_reqs go away some times causing a core
                usleep(1000);
                while (m_resolved_cnt < m_dns_reqs.size())
                {
// example in man page shows the gai list being allocated each time, but never unallocated? is it consumed or just leaked
                        int ret = gai_suspend(m_dns_reqs.data(), m_dns_reqs.size(), nullptr);
                        if (ret)
                        {
                                std::cout << "gai_suspend(): " << gai_strerror(ret) << '(' << ret << ')' << std::endl;
                                check_dns_reqs();
                                if (m_resolved_cnt == m_servers.size())
                                {
                                        std::cout << "\tfinished" << std::endl;
                                        m_cond.notify_all();
                                        return false;
                                }
        
                                std::cout << "\tnot finished total: " << m_servers.size() << ", resolved: " << m_resolved_cnt << std::endl;
                                return true;
                        }


                        check_dns_reqs();
                }
                return (m_resolved_cnt == m_servers.size());
        }

        uint32_t waiter_cnt() const { return m_waiters; }

private:
        void check_dns_reqs()
        {
                for (int i = 0; i < m_dns_reqs.size(); i++)
                {
                        if (m_dns_reqs[i] == nullptr)
                                continue;

                        int ret = gai_error(m_dns_reqs[i]);
                        if (ret == EAI_INPROGRESS)
                                continue;

                        //std::cout << i << ": " << m_dns_reqs[i]->ar_name << " " << (ret == 0 ? "finished" : gai_strerror(ret)) << std::endl;
                        if (!ret)
                        {
                                std::unique_lock alock(m_mutex);
                                server *srv = m_servers[m_dns_reqs[i]->ar_name];
                                m_servers_resolved.push_back(srv);
                                m_dns_reqs[i] = nullptr;
                                m_resolved_cnt++;
                                std::cout << "resolved " << srv->name() << '(' << m_resolved_cnt << '/' << m_dns_reqs.size() << ')' << std::endl;
                                m_cond.notify_one();
                        }
                }
        }

        void parse_delimited(const std::string_view& buff, const std::string_view& delims)
        {
                size_t len = buff.length();
                size_t spos = 0;
                while (spos < len)
                {
                        size_t epos = buff.find_first_of(delims, spos);
                        std::string_view srv = buff.substr(spos, epos - spos);
                        if (!srv.empty())
                        {
                                server *psrv = new server(srv);
                                m_servers[psrv->name()] = psrv;
                        }
                        spos = epos + 1; 
                        if (epos == std::string_view::npos)
                                break;
                } 
        }

        void start_resolution()
        {
                m_dns_reqs.reserve(m_servers.size());

                // add unresolved srvs to m_dns_reqs
                // that suggests that we need m_servers to store a struct/class for each server
                // { srvname, addrinfo, times, bytes_sent, bytes_received, status, error }
                for (auto & [name, srv] : m_servers)
                {
                        srv->gai()->ar_name = strdup(srv->name().data());
                        srv->set_index(m_dns_reqs.size());
                        // does that really need duped???
                        m_dns_reqs.push_back(srv->gai());
                }

                int ret = getaddrinfo_a(GAI_NOWAIT, m_dns_reqs.data(), m_dns_reqs.size(), nullptr);
                if (ret)
                {
                        std::cout << "getaddrinfo_a() failed: " << gai_strerror(ret) << std::endl;
                        exit(EXIT_FAILURE);
                }
                std::cout << "started resolution for " << m_dns_reqs.size() << " addrs" << std::endl;
        }

private:
        std::unordered_map<std::string_view, server*> m_servers;

        std::vector<server*> m_servers_resolved;    // added here as they are resolved
        std::vector<server*> m_servers_processed;   // moved here when we hand them out
        std::mutex m_mutex;
        std::condition_variable m_cond;
        std::atomic<uint32_t> m_waiters{0};


        std::vector<gaicb*> m_dns_reqs;
        size_t m_resolved_cnt = 0;
};
